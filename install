#!/usr/bin/env bash

DOT_FILES=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
CONFIG_PATH=$HOME/.config

# Bash
if [ -f $HOME/.bashrc ]; then
	rm $HOME/.bashrc
fi
if [ -f $HOME/.bash_profile ]; then
	rm $HOME/.bash_profile
fi
if [ -f $HOME/.bash_logout ]; then
	rm $HOME/.bash_logout
fi

ln -sf $DOT_FILES/bash/.bash_aliases $HOME/.bash_aliases
ln -sf $DOT_FILES/bash/.bashrc $HOME/.bashrc
ln -sf $DOT_FILES/bash/.bash_profile $HOME/.bash_profile
ln -sf $DOT_FILES/bash/.bash_logout $HOME/.bash_logout
source $DOT_FILES/bash/.bashrc $HOME/.bashrc

##############################
# JetBrains Mono Fonts	     #
##############################
mkdir -p $DOT_FILES/fonts
curl -o $DOT_FILES/fonts/JetBrainsMono.zip https://www.1001fonts.com/download/jetbrains-mono.zip
if [ -d $DOT_FILES/fonts/ ]; then
	mkdir -p $HOME/.local/share/fonts/JetBrainsMono
	unzip -d $HOME/.local/share/fonts/JetBrainsMono $DOT_FILES/fonts/JetBrainsMono.zip
fi

# Install requirements
REQUIREMENTS='curl ansible'
if [ -x "$(command -v apk)" ];       then sudo apk add --no-cache g++ gcc libc-dev make $REQUIREMENTS
elif [ -x "$(command -v apt)" ]; then sudo apt-get install build-essential $REQUIREMENTS
elif [ -x "$(command -v dnf)" ];     then sudo dnf install make automake gcc gcc-c++ kernel-devel $REQUIREMENTS
elif [ -x "$(command -v pacman)" ];     then sudo pacman -Sy base-devel $REQUIREMENTS
elif [ -x "$(command -v zypper)" ];  then sudo zypper install -t pattern devel_basis && sudo zypper install $REQUIREMENTS
else echo "FAILED TO INSTALL PACKAGE: Package manager not found. You must manually install: $REQUIREMENTS">&2; fi

# Brew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

if [ -d /home/linuxbrew/ ]; then
	test -d $HOME/.linuxbrew && eval "$($HOME/.linuxbrew/bin/brew shellenv)"
	test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	
	# This is in git
	# test -r ~/.bash_profile && echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bash_profile
fi

brew vendor-install ruby
brew install gcc neovim

# Install pipx with brew
brew install pipx
brew cleanup --prune 30
pipx ensurepath completions

# Install multiple php
brew tap shivammathur/php
brew install shivammathur/php/php@8.3
brew install shivammathur/php/php@8.2
brew install shivammathur/php/php@8.1
brew install shivammathur/php/php@8.0
brew install shivammathur/php/php@7.4
brew install shivammathur/php/php@7.3
brew install shivammathur/php/php@5.6

sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@5.6/bin/php /usr/local/bin/php56
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@7.3/bin/php /usr/local/bin/php73
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@7.4/bin/php /usr/local/bin/php74
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@8.0/bin/php /usr/local/bin/php80
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@8.1/bin/php /usr/local/bin/php81
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@8.2/bin/php /usr/local/bin/php82
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@8.3/bin/php /usr/local/bin/php82

# Current php
sudo ln -sf /home/linuxbrew/.linuxbrew/opt/php@8.3/bin/php /usr/local/bin/php
# End Brew

# Install poetry
pipx install --force poetry

# Install ansible
# pipx install --include-deps ansible

# Run playbooks
read -p "Do you want to install with Ansible? [y/N] " choice

case "$choice" in
  y|Y )
    echo "Installing with Ansible..."
    echo "Your password needed! "
    ansible-playbook --ask-become-pass $DOT_FILES/playbooks/main.yaml
    ;;
  * )
    echo "Skipping Ansible installation."
    ;;
esac

# Install Rust
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# tmux
if [ -f $HOME/.tmux.conf ]; then
	rm $HOME/.tmux.conf
fi
ln -sf $DOT_FILES/tmux/tmux.conf $HOME/.tmux.conf

# Kitty
if [ -d $CONFIG_PATH/kitty ]; then
	rm -rf $CONFIG_PATH/kitty
fi
ln -sf $DOT_FILES/kitty $CONFIG_PATH

# yt-dlp
mkdir -p $HOME/.config/yt-dlp
ln -sf $DOT_FILES/yt-dlp/config $HOME/.config/yt-dlp/config
ln -sf $DOT_FILES/yt-dlp/laracasts.config $HOME/.config/yt-dlp/laracasts.config

# NeoVim
if [ -d $CONFIG_PATH/nvim ]; then
	rm -rf $CONFIG_PATH/nvim
fi
# ln -sf $DOT_FILES/nvim $CONFIG_PATH # Old
# Remove pre-existing nvim conf
mv $HOME/.config/nvim{,.bak}
mv $HOME/.local/share/nvim{,.bak}
mv $HOME/.local/state/nvim{,.bak}
mv $HOME/.cache/nvim{,.bak}

git clone https://github.com/LazyVim/starter $HOME/.config/nvim
rm -rf $HOME/.config/nvim/.git

# Scripts
mkdir -p $HOME/.local/bin
ln -sf $DOT_FILES/scripts/t $HOME/.local/bin/t

