#!/usr/bin/env bash

DOT_FILES=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
PACKAGES=$DOT_FILES/packages
CONFIG_PATH=$HOME/.config
NVIM_CONFIG=$CONFIG_PATH/nvim
NVIM_PLUGINS=$NVIM_CONFIG/lua/plugins
EPOCH=$(date +%s%N)
ARCHIVE=$DOT_FILES/archive/$EPOCH
NERD_FONT_VERSION="v3.1.1"

# Remove brew if existing
function remove_brew {
	if [ -d /home/linuxbrew/ ]; then
		test -d $HOME/.linuxbrew && eval "$($HOME/.linuxbrew/bin/brew shellenv)"
		test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
		sudo rm -rf /home/linuxbrew
	fi
}

##############################
# All Nerd Fonts	     #
##############################
function dl_all_nerd_fonts {
	mkdir -p $DOT_FILES/fonts
	curl -s -L -o $DOT_FILES/fonts/NerdFonts_$NERD_FONT_VERSION.zip -A "Mozilla/5.0" https://github.com/ryanoasis/nerd-fonts/archive/refs/tags/$NERD_FONT_VERSION.zip
	if [ -d $DOT_FILES/fonts/ ]; then
		mkdir -p $HOME/.local/share/fonts
		unzip -d $HOME/.local/share/fonts $DOT_FILES/fonts/NerdFonts_$NERD_FONT_VERSION.zip
	fi
}

# Bash
if [ -f $HOME/.bashrc ]; then
	rm $HOME/.bashrc
fi
if [ -f $HOME/.bash_profile ]; then
	rm $HOME/.bash_profile
fi
if [ -f $HOME/.bash_logout ]; then
	rm $HOME/.bash_logout
fi
if [ -f $HOME/.bash_aliases ]; then
	rm $HOME/.bash_aliases
fi
if [ -f $HOME/.bash_exports ]; then
	rm $HOME/.bash_exports
fi
if [ -f $HOME/.bash_completion ]; then
	rm $HOME/.bash_completion
fi
if [ -f $HOME/.secrets ]; then
	rm $HOME/.secrets
fi
ln -sf $DOT_FILES/bash/.bash_aliases $HOME/.bash_aliases
ln -sf $DOT_FILES/bash/.bashrc $HOME/.bashrc
ln -sf $DOT_FILES/bash/.bash_profile $HOME/.bash_profile
ln -sf $DOT_FILES/bash/.bash_logout $HOME/.bash_logout
ln -sf $DOT_FILES/bash/.bash_aliases $HOME/.bash_aliases
ln -sf $DOT_FILES/bash/.bash_exports $HOME/.bash_exports
ln -sf $DOT_FILES/bash/.bash_completion $HOME/.bash_completion
if [ -f $DOT_FILES/bash/.secrets ]; then
	ln -sf $DOT_FILES/bash/.secrets $HOME/.secrets
fi
source $DOT_FILES/bash/.bashrc $HOME/.bashrc

# Download fonts
dl_all_nerd_fonts

# Install requirements
if [ -x "$(command -v apt)" ]; then
	remove_brew
	sudo apt update -y && sudo apt upgrade -y
	xargs sudo apt-get install <$PACKAGES/apt_packages.txt
	sudo apt autoclean && sudo apt clean
fi

if [ -x "$(command -v snap)" ]; then
	remove_brew
	while IFS="" read -r p || [ -n "$p" ]; do
		sudo snap install "$p"
		sudo snap refresh "$p"
	done <$PACKAGES/snap_packages.txt
	while IFS="" read -r p || [ -n "$p" ]; do
		sudo snap install --classic "$p"
		sudo snap refresh --classic "$p"
	done <$PACKAGES/snap_classic_packages.txt
fi

# Install Rust
curl -s --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# tmux
if [ -f $HOME/.tmux.conf ]; then
	rm $HOME/.tmux.conf
fi
ln -sf $DOT_FILES/tmux/tmux.conf $HOME/.tmux.conf

# Kitty
if [ -d $CONFIG_PATH/kitty ]; then
	rm -rf $CONFIG_PATH/kitty
fi
ln -sf $DOT_FILES/kitty $CONFIG_PATH

# Neofetch
if [ -d $CONFIG_PATH/neofetch ]; then
	rm -rf $CONFIG_PATH/neofetch
fi
ln -sf $DOT_FILES/neofetch $CONFIG_PATH

# NeoVim
if [ -d $CONFIG_PATH/nvim ]; then
	rm -rf $CONFIG_PATH/nvim
fi

if [ -d $DOT_FILES/nvim ]; then
	mkdir -p $ARCHIVE
	mv -f $DOT_FILES/nvim $ARCHIVE/nvim
fi

# Remove pre-existing nvim conf
rm -rf $HOME/.local/share/nvim
rm -rf $HOME/.local/state/nvim
rm -rf $HOME/.cache/nvim

# Lazygit
LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
curl -Lso lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
tar xf lazygit.tar.gz lazygit
sudo install lazygit /usr/local/bin
rm -rf lazygit*

# Lazyvim
curl -Lso lazyvim.zip https://github.com/LazyVim/starter/archive/refs/heads/main.zip && unzip lazyvim.zip -d lazyvim

# Scripts
mkdir -p $HOME/.local/bin
ln -sf $DOT_FILES/scripts/update_apt_list $HOME/.local/bin/update_apt_list
ln -sf $DOT_FILES/scripts/commit_message $HOME/.local/bin/commit_message
chmod +x $DOT_FILES/scripts/update_apt_list
chmod +x $DOT_FILES/scripts/commit_message


# Looki looki if reboot is needy needy
if [ -f /var/run/reboot-required ]; then
  echo 'reboot required'
  sudo reboot
fi
